import { useQuery } from '@tanstack/react-query';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useEffect, useMemo, useState } from 'react';
import { toast } from 'react-toastify';
import { Counter, ImageShowcase, ProductCard } from '../../components';
import { getProductsByCategory, getSingleProduct } from '../../features';
import {
  triggerUpdateStore,
  triggerUpdateStoreCount,
} from '../../utils/helpers';

const ProductId = () => {
  const { query } = useRouter();
  const { id } = query;

  //   get single product
  const { data: singleProduct, isLoading: productLoading } = useQuery(
    ['single-product-data', id],
    () => {
      return getSingleProduct({ id });
    },
  );

  const gallery = singleProduct?.images;
  const category = singleProduct?.category;

  //   get all products under a particular category
  const { data: categoryProduct, isLoading: categoryLoading } = useQuery(
    ['category-product-data', category],
    () => {
      return getProductsByCategory({ category });
    },
  );

  const [store, setStore] = useState([]);
  const [count, setCount] = useState(1);
  const value = {
    id: id,
    count: count,
  };

  const storeCategoryProducts = useMemo(() => {
    return categoryProduct?.products;
  }, [categoryProduct]);

  //   fetch cart value for current id
  const checkerValue = store.filter((item) => item?.id === value?.id);

  const addToCart = () => {
    let updatedStore;

    if (checkerValue?.length > 0) {
      toast.error('Item already in cart');
      return;
    } else {
      updatedStore = [...store, value];
      localStorage.setItem('store-data', JSON.stringify(updatedStore));

      triggerUpdateStore(setStore);
      toast.success('Item added to cart');
    }
  };

  useEffect(() => {
    const stored = localStorage.getItem('store-data');
    setStore(JSON.parse(stored) || []);
  }, []);

  const decreaseCount = () => {
    if (count === 0) {
      return;
    } else {
      setCount(count - 1);
      const updateDecrement = {
        ...checkerValue?.[0],
        count: checkerValue?.[0]?.count - 1,
      };

      triggerUpdateStoreCount(store, updateDecrement);
      triggerUpdateStore(setStore);
    }
  };

  const increaseCount = () => {
    setCount(count + 1);
    const updateIncrement = {
      ...checkerValue?.[0],
      count: checkerValue?.[0]?.count + 1,
    };

    triggerUpdateStoreCount(store, updateIncrement);
    triggerUpdateStore(setStore);
  };

  return (
    <>
      <Head>
        <title> {`Chimoney Stores | ${singleProduct?.title}`} </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container mx-auto">
        <div className="mb-20 lg:grid grid-cols-12 gap-10">
          <div className="p-5 mb-10 lg:mb-0 lg:col-span-7 shadow">
            <h1 className="text-xl font-semibold">{singleProduct?.title}</h1>
            <ImageShowcase gallery={gallery} />
          </div>

          <div className="h-fit p-5 lg:col-span-5 shadow">
            <div className="mb-4">
              <div className="text-lg font-semibold"> Brand</div>
              <div>{singleProduct?.brand}</div>
            </div>

            <div className="mb-4">
              <div className="text-lg font-semibold"> Description</div>
              <div>{singleProduct?.description}</div>
            </div>

            <div className="mb-4">
              <span className="text-lg font-semibold"> Price: </span>
              <span>${singleProduct?.price}</span>
            </div>

            <div className="mb-4">
              <span className="text-lg font-semibold"> In Stock: </span>
              <span>{singleProduct?.stock}</span>
            </div>
            {checkerValue?.length > 0 ? (
              <div className="mb-4">
                <Counter
                  count={checkerValue?.[0].count || count}
                  decreaseCount={decreaseCount}
                  increaseCount={increaseCount}
                />
              </div>
            ) : (
              <div className="mt-10 flex justify-center">
                <button
                  className="py-[10px] px-10 bg-pink-500 hover:bg-pink-700 text-white uppercase transition-all ease-in-out duration-500 rounded"
                  onClick={addToCart}
                >
                  Add to cart
                </button>
              </div>
            )}
          </div>
        </div>

        <div className="p-5 shadow">
          <h2 className="mb-10 text-xl font-semibold">
            Products for {category}
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-10 lg:gap-16">
            {storeCategoryProducts?.map((item) => (
              <ProductCard key={item?.id} item={item} />
            ))}
          </div>
        </div>
      </div>
    </>
  );
};

export default ProductId;
